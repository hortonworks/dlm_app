#
# /*
#  * Copyright  (c) 2016-2017, Hortonworks Inc.  All rights reserved.
#  *
#  * Except as expressly permitted in a written agreement between you or your company
#  * and Hortonworks, Inc. or an authorized affiliate or partner thereof, any use,
#  * reproduction, modification, redistribution, sharing, lending or other exploitation
#  * of all or any part of the contents of this software is strictly prohibited.
#  */
#

#This name will show up in Consul
spring.application.name=zuul
# Port at which the gateway is available
server.port=8762
zuul.prefix=/service

spring.cloud.consul.host=127.0.0.1
spring.cloud.consul.port=8500
spring.cloud.consul.config.enabled=true

#Use client side LB
spring.cloud.consul.ribbon.enabled=true
spring.cloud.consul.discovery.preferIpAddress=true
hystrix.command.default.execution.timeout.enabled=false
ribbon.ConnectTimeout=60000
ribbon.ReadTimeout=60000

#This config does not seem to work well, For now attaching a Pre filter to throw out any non /api requests
zuul.ignoredServices=*
zuul.add-proxy-headers=false

#Turn off in prod
zuul.debug.request=true

enable.cloudbreak=true

zuul.routes.cs.path=/clusters/**
zuul.routes.cs.serviceId=clusters

zuul.routes.db.path=/db/**
zuul.routes.db.serviceId=db

zuul.routes.dlm.path=/dlm/**
zuul.routes.dlm.serviceId=dlm

zuul.routes.dp.path=/core/**
zuul.routes.dp.serviceId=core

#Ambari Dispatch endpoint
#This endpoint can be used to proxy Ambari API's with the call passing through cluster service
zuul.routes.hdp.path=/hdp/**
zuul.routes.hdp.serviceId=hdp_proxy
zuul.routes.hdp.sensitiveHeaders=Cookie,Set-Cookie

zuul.routes.knox.path=/knox/**
zuul.routes.knox.serviceId=knox


zuul.routes.cloudbreak.path=/cloudbreak/**
zuul.routes.cloudbreak.serviceId=cloudbreak
zuul.routes.cloudbreak.sensitiveHeaders=
cloudbreak.ribbon.IsSecure=true



# serialization
spring.jackson.serialization.write_dates_as_timestamps=false

#sso
# if sso is enabled. one should set signing.pub.key.path as well
sso.enabled=false
#path to knox public key. eg /usr/certs/konx-signing.pem.
#To generate this key one has to export certificate form knox. one needs to knox the knox master password
#keytool -export -alias gateway-identity -storepass <gatewaymasterkey> -keystore <KNOX_HOME>/data\security\keystores\gateway.jks -rfc ><path to cert file>
#eg keytool -export -alias gateway-identity -storepass master -keystore gateway.jks -rfc  >/usr/certs/knox-signing.pem
#signing.pub.key.path=/usr/certs/knox-signing.pem
signing.pub.key.path=

sso.cookie.name=hadoop-jwt
#sso cookie domain. #This should match with knox configuration if specified (see knoxsso.cookie.domain.suffix in KnoxSSO cookie provider)
#if knoxsso.cookie.domain.suffix is not present it means it is defaulted to the domain name with which you access the application.
#If left empty the domain is inferered from hostname of knox.url
sso.cookie.domain=
knox.url.discover.fromrequest=true

server.domain=dataplane
knox.route=knox
knox.websso.path=/gateway/knoxsso/knoxauth/login.html
metaredirect.forsafari=true

#jwt signing.
#keystore file in RSA algo (jks) filepath. If left is empty,we would use pre configured jks from classpath(used for dev purpose).
#Eg command to generate the keystore #keytool -genkey -keyalg RSA -alias dp-signing -keystore gateway-signing.jks  -validity 720 -keysize 2048
jwt.signing.keystore.jks.path=
jwt.signing.alias=dp-signing
jwt.signing.keystore.password=changeit
#alias password can be empty if it is same as keystore password
jwt.signing.alias.password=
#validity in minutes
jwt.validity.minutes=120

#ldap resync
ldap.groups.resync.interval.minutes=120

#policies
policy.registration.enabled=false
permission.policies=dlm,core,cloudbreak
permission.policy.dlm=dlm_policies.json
permission.policy.core=dpapp_policies.json
permission.policy.cloudbreak=cb_policies.json

#comma separated list of user agents.(the first portion denoting the product /layout engine.
#more options for browser matches are there but not required.
useragent_engines=Mozilla/,Webkit/,Opera/,Lynx/,Links ,NetSurf/,Dooble/,Dillo/
management.security.enabled=false
management.security.sessions=stateless
management.add-application-context-header=false

security.basic.enabled=false
security.sessions=stateless



