# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#Users API

GET           /users                                                         controllers.Users.all(username: Option[String])
POST          /users                                                         controllers.Users.insert
GET           /users/:userId                                                 controllers.Users.load(userId:Long)
DELETE        /users/:userId                                                 controllers.Users.delete(userId:Long)

#Roles API
GET           /roles                                                         controllers.Roles.all
GET           /roles/:roleId                                                 controllers.Roles.load(roleId:Long)
POST          /roles                                                         controllers.Roles.add
POST          /user-role                                                     controllers.Roles.addUserRole
GET           /user-role/user/:username                                      controllers.Roles.getRolesForUser(username)

#Permissions API
GET           /permissions                                                   controllers.Permissions.all
POST          /permissions                                                   controllers.Permissions.add
GET           /permissions/user/:username                                    controllers.Permissions.userPermissions(username)

#Locations
GET           /locations                                                     controllers.Datalakes.getLocations(query: Option[String])
GET           /locations/:locationId                                         controllers.Datalakes.loadLocation(locationId:Long)
DELETE        /locations/:locationId                                         controllers.Datalakes.deleteLocation(locationId:Long)
POST          /locations                                                     controllers.Datalakes.addLocation

#Datalakes API
GET           /datalakes                                                     controllers.Datalakes.all
POST          /datalakes                                                     controllers.Datalakes.add
GET           /datalakes/:datalakeId                                         controllers.Datalakes.load(datalakeId:Long)
GET           /datalakes/:datalakeId/clusters                                controllers.Clusters.getByDatalakeId(datalakeId:Long)
DELETE        /datalakes/:datalakeId                                         controllers.Datalakes.delete(datalakeId:Long)
PATCH         /datalakes/status                                              controllers.Datalakes.updateStatus

#Clusters API
GET           /clusters                                                      controllers.Clusters.all(datalakeId: Option[Long])
POST          /clusters                                                      controllers.Clusters.add
GET           /clusters/:clusterId                                           controllers.Clusters.load(clusterId:Long)
DELETE        /clusters/:clusterId                                           controllers.Clusters.delete(clusterId:Long)


#Cluster services API

GET           /clusters/:clusterId/services                                  controllers.ClusterServices.allWithCluster(clusterId:Long)
GET           /clusters/:datalakeId/services                                 controllers.ClusterServices.allWithDatalake(datalakeId:Long)
POST          /cluster/services                                              controllers.ClusterServices.addWithCluster
POST          /datalake/services                                             controllers.ClusterServices.addWithDatalake
GET           /clusters/:clusterId/service/:serviceName                      controllers.ClusterServices.loadWithClusterAndName(clusterId:Long,serviceName:String)
GET           /services/:serviceName                                         controllers.ClusterServices.loadWithServiceName(serviceName:String)
DELETE        /services/:serviceId                                           controllers.ClusterServices.delete(serviceId:Long)
PUT           /clusters/services                                             controllers.ClusterServices.updateWithCluster

#Workspaces API
GET           /workspaces                                                    controllers.Workspaces.all
POST          /workspaces                                                    controllers.Workspaces.insert
GET           /workspaces/:workspaceId                                       controllers.Workspaces.load(workspaceId:Long)
DELETE        /workspaces/:workspaceId                                       controllers.Workspaces.delete(workspaceId:Long)


#Asset workspace API
#Get assets for workspace
GET           /assets/workspace/:workspaceId                                 controllers.AssetWorkspaces.assetsforWorkspace(workspaceId:Long)
POST          /assets/workspace                                              controllers.AssetWorkspaces.add



#Categories
GET           /categories                                                    controllers.Categories.all
POST          /categories                                                    controllers.Categories.insert
GET           /categories/:categoryId                                        controllers.Categories.load(categoryId:Long)
DELETE        /categories/:categoryId                                        controllers.Categories.delete(categoryId:Long)

#Skus API
GET           /skus                                                          controllers.Skus.all
POST          /skus                                                          controllers.Skus.insert
GET           /skus/:skuId                                                   controllers.Skus.load(skuId: Long)
DELETE        /skus/:skuId                                                   controllers.Skus.delete(skuId: Long)

#EnabledSkus API
GET           /enabledskus                                                   controllers.EnabledSkus.all
POST          /enabledskus                                                   controllers.EnabledSkus.insert
GET           /enabledskus/:skuId                                            controllers.EnabledSkus.load(skuId: Long)
DELETE        /enabledskus/:skuId                                            controllers.EnabledSkus.delete(skuId: Long)

#ClusterHosts API
GET           /clusters/:clusterId/hosts                                     controllers.ClusterHosts.allWithCluster(clusterId:Long)
POST          /clusters/hosts                                                controllers.ClusterHosts.add
PUT           /clusters/hosts                                                controllers.ClusterHosts.addOrUpdate
GET           /clusters/:clusterId/hosts/:hostId                             controllers.ClusterHosts.loadWithCluster(clusterId: Long, hostId:Long)
DELETE        /clusters/:clusterId/hosts/:hostId                             controllers.ClusterHosts.delete(clusterId: Long, hostId:Long)

#ClusterProperties API
GET           /clusters/:clusterId/properties                                controllers.ClusterProps.allWithCluster(clusterId:Long)
POST          /clusters/properties                                           controllers.ClusterProps.add
GET           /clusters/:clusterId/properties/:propertiesId                  controllers.ClusterProps.loadWithCluster(clusterId: Long, propertiesId:Long)
DELETE        /clusters/:clusterId/properties/:propertiesId                  controllers.ClusterProps.delete(clusterId: Long, propertiesId:Long)

#Dataset API
GET           /datasets                                                      controllers.Datasets.all
POST          /datasets                                                      controllers.Datasets.add
PUT           /datasets                                                      controllers.Datasets.update
GET           /datasets/:datasetId                                           controllers.Datasets.load(datasetId:Long)
DELETE        /datasets/:datasetId                                           controllers.Datasets.delete(datasetId:Long)

#DatasetCategory Api
GET           /datasets/:datasetId/categories                                controllers.DatasetCategories.allWithDatasetId(datasetId:Long)
GET           /categories/:categoryId/datasets                               controllers.DatasetCategories.allWithCategoryId(categoryId:Long)
POST          /datasets/categories                                           controllers.DatasetCategories.add
DELETE        /datasets/:datasetId/categories/:categoryId                    controllers.DatasetCategories.delete(datasetId:Long, categoryId:Long)

#UnclassifiedDataset API
GET           /unclassifieddatasets                                          controllers.UnclassifiedDatasets.all
POST          /unclassifieddatasets                                          controllers.UnclassifiedDatasets.add
GET           /unclassifieddatasets/:datasetId                               controllers.UnclassifiedDatasets.load(datasetId:Long)
DELETE        /unclassifieddatasets/:datasetId                               controllers.UnclassifiedDatasets.delete(datasetId:Long)

#UnclassifiedDatasetCategory Api
GET           /unclassifieddatasets/:datasetId/categories                    controllers.UnclassifiedDatasetCategories.allWithDatasetId(datasetId:Long)
GET           /categories/:categoryId/datasets                               controllers.UnclassifiedDatasetCategories.allWithCategoryId(categoryId:Long)
POST          /unclassifieddatasets/categories                               controllers.UnclassifiedDatasetCategories.add
DELETE        /unclassifieddatasets/:datasetId/categories/:categoryId        controllers.UnclassifiedDatasetCategories.delete(datasetId:Long, categoryId:Long)

#Dataset Details API
GET           /datasets/:datasetId/details                                   controllers.DatasetDetailsCtrl.allWithDatasetId(datasetId:Long)
POST          /datasets/details                                              controllers.DatasetDetailsCtrl.add
DELETE        /datasets/details/:id                                          controllers.DatasetDetailsCtrl.delete(id:Long)

#Data Asset Api
GET           /dataassets/:datasetId                                         controllers.DataAssets.allWithDatasetId(datasetId:Long)
POST          /dataassets                                                    controllers.DataAssets.add
DELETE        /dataassets/:id                                                controllers.DataAssets.delete(id:Long)


#Config
GET           /configurations/:key                                           controllers.Configs.get(key)