# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                      controllers.Default.redirect(to = "/ui")
# Responds with 404 Not Found
GET         /ui                                    controllers.Application.index
GET         /ui/*path                              controllers.Application.route(path)

#auth calls
POST        /auth/login                            controllers.Authentication.login

#api
POST        /api/clusters                          controllers.Clusters.create
GET         /api/clusters                          controllers.Clusters.list
PUT         /api/clusters                          controllers.Clusters.update
GET         /api/clusters/:id                      controllers.Clusters.get(id)

PUT         /api/datacenters                       controllers.DataCenters.create
GET         /api/datacenters                       controllers.DataCenters.list
GET         /api/datacenters/:dcName/detail        controllers.DataCenters.getClusters(dcName)
GET         /api/datacenters/:id                   controllers.DataCenters.get(id)
GET         /api/datacenters/:id/clusters          controllers.DataCenters.getClustersByDataCenterId(id)

GET         /api/backup-policies                   controllers.BackupPolicies.list(dataCenterId: Option[String], clusterId: Option[String], resourceId: Option[String], resourceType: Option[String])
POST        /api/backup-policies                   controllers.BackupPolicies.create
# PUT         /api/backup-policies/:id               controllers.BackupPolicies.update(id)
GET         /api/backup-policies/:id               controllers.BackupPolicies.get(id)

#Atlas
#TODO:fix endpoints
GET         /api/datacenters/atlas/tables          controllers.AtlasHive.getAllTables(clusterHost,dc,cached)
GET         /api/datacenters/atlas/table           controllers.AtlasHive.getTableDefinition(clusterHost,dc,table,cached)
GET         /api/datacenters/atlas/entity          controllers.AtlasHive.getEntity(clusterHost,dc,guid)
GET         /api/datacenters/atlas/lineage         controllers.AtlasHive.getLineage(clusterHost,dc,guid)
GET         /api/datacenters/atlas/audit           controllers.AtlasHive.getAudit(clusterHost,dc,guid)

#Hbase
GET         /api/datacenters/hbase/tables          controllers.AtlasHBase.getAllTables(clusterHost,dc,cached)
GET         /api/datacenters/hbase/table           controllers.AtlasHBase.getTableDefinition(clusterHost,dc,table,cached)
GET         /api/datacenters/hbase/entity          controllers.AtlasHBase.getEntity(clusterHost,dc,guid)
GET         /api/datacenters/Hbase/audit           controllers.AtlasHBase.getAudit(clusterHost,dc,guid)

#Files
GET         /api/datacenters/hdfs/filesets         controllers.AtlasHdfs.getAllFiles(clusterHost,dc,cached)
GET         /api/datacenters/hdfs/entity           controllers.AtlasHdfs.getEntity(clusterHost,dc,guid)
GET         /api/datacenters/hdfs/audit            controllers.AtlasHdfs.getAudit(clusterHost,dc,guid)

#Ranger
GET         /api/datacenters/ranger/users         controllers.RangerAudit.getTopUsers(clusterHost,dc)
GET         /api/datacenters/ranger/audit         controllers.RangerAudit.getAuditLog(clusterHost,dc)
GET         /api/datacenters/ranger/access         controllers.RangerAudit.getTopAccessTypes(clusterHost,dc)



#Search

POST        /api/search/hive                       controllers.AtlasHiveSearch.searchHiveTables
POST        /api/search/hbase                      controllers.AtlasHbaseSearch.searchHbaseTables
POST        /api/search/hdfs                       controllers.AtlasHdfsSearch.searchFileSets


#DataSet

POST        /api/datasets                          controllers.DataSets.create
PUT         /api/datasets                          controllers.DataSets.update
GET         /api/datasets/:name                    controllers.DataSets.getByname(name,host,datacenter)
GET         /api/datasets                          controllers.DataSets.getAll(host,datacenter)


# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                          controllers.Assets.versioned(path="/public", file: Asset)
