import {Router} from '@angular/router';
import {Component, OnInit} from '@angular/core';
import {DataSetService} from '../../../services/data-set.service';
import {DataSet} from '../../../models/data-set';
import {Environment} from '../../../environment';
import {DataCenterService} from '../../../services/data-center.service';
import {DataCenter} from '../../../models/data-center';
import {Persona} from '../../../shared/utils/persona';
import {SearchQueryService} from '../../../services/search-query.service';
import {SearchQuery} from '../../../models/search-query';
import {BreadcrumbService} from '../../../services/breadcrumb.service';

declare let d3: any;

export enum DataSetTab {
    DATA_SET, UNCLASSIFIED
}

@Component({
    selector: 'data-set',
    templateUrl: 'assets/app/components/data-analyst/data-set/data-set.component.html',
    styleUrls: ['assets/app/components/data-analyst/data-set/data-set.component.css']
})

export class DataSetComponent implements OnInit {
    persona = Persona;

    ALL = 'All';
    DASHBOARD = 'dashboard';
    dataSets: DataSet[] = [];
    dataSetTab = DataSetTab;
    dataSetsMapKeys: string[] = [];
    activeDataSetTab = DataSetTab.DATA_SET;
    dataSetsMap: {[key: string]: DataSet[]} = {'All': []};
    selectedCategory = this.ALL;
    showAutoGenerated = true;
    selectedUnclassifiedCategory = '';
    autoGeneratedCategory = [{'name': 'Storage Metrics', 'count': 1},
                            {'name': 'Business Processes', 'count': 1}
                            ];
    dataInflowConfig: any = {};
    dataInflowData: any[] = [];
    usersConfig: any = {};
    usersData: any[] = [];
    usageConfig: any = {};
    usageData: any[] = [];
    options: any = {};
    data: any[] = [];

    constructor(private dataSetService: DataSetService, private router: Router, private dataCenterService: DataCenterService,
                private searchQueryService: SearchQueryService, private environment: Environment,
                private breadcrumbService: BreadcrumbService) {
        this.breadcrumbService.crumbMap = [{'url': '/ui/data-analyst/analyst-dashboard', 'name': 'Data Set'}];

        let dataSize = new DataSet();
        dataSize.name = 'Storage Metrics';
        dataSize.dataCenter = 'Storage Metrics';
        dataSize.userName = 'analyzed';
        dataSize.lastModified = new Date().toDateString();
        dataSize['hiveCount'] = 1;
        dataSize['hbaseCount'] = 3;
        dataSize['hdfsCount'] = 8;

        let failedRenewal = new DataSet();
        failedRenewal.name = 'Business Processes';
        failedRenewal.dataCenter = 'Business Processes';
        failedRenewal.userName = 'analyzed';
        failedRenewal.lastModified = new Date().toDateString();
        failedRenewal['hiveCount'] = 1;
        failedRenewal['hbaseCount'] = 3;
        failedRenewal['hdfsCount'] = 8;

        this.dataSetsMap = {'All': [],
            'Storage Metrics': [dataSize],
            'Business Processes': [failedRenewal]
        };
    }

    ngOnInit() {
        // replace this with merge map
        this.dataCenterService.get().subscribe((dataCenters: DataCenter[]) => {
            this.getDataCenterDetails(dataCenters);
        });

        this.createDashboardData();
    }

    createDashboardData() {
        this.dataInflowConfig = {
            chart: {
                type: 'discreteBarChart',
                height: 200,
                width: 250,
                // margin : {
                //     top: 20,
                //     right: 20,
                //     bottom: 50,
                //     left: 55
                // },
                color: ['#EF6162'],
                x: function(d){return d.label;},
                y: function(d){return d.value;},
                // showValues: true,
                // valueFormat: function(d){
                //     return d3.format(',.4f')(d);
                // },
                duration: 500,
                // xAxis: {
                //     axisLabel: 'X Axis'
                // },
                yAxis: {
                    // axisLabel: 'Y Axis',
                        axisLabelDistance: -10,
                    tickFormat: function(d){
                        return d + 'K';
                    }
                }
            }
        };
        this.dataInflowData = [
            {
                key: 'Cumulative Return',
                values: [
                    {
                        'label' : 'MON' ,
                        'value' : (Math.floor(Math.random() * 30) + 10)
                    } ,
                    {
                        'label' : 'TUE' ,
                        'value' : (Math.floor(Math.random() * 30) + 10)
                    } ,
                    {
                        'label' : 'WED' ,
                        'value' : (Math.floor(Math.random() * 30) + 10)
                    } ,
                    {
                        'label' : 'THU' ,
                        'value' : (Math.floor(Math.random() * 30) + 10)
                    },
                    {
                        'label' : 'FRI' ,
                        'value' : (Math.floor(Math.random() * 30) + 10)
                    }
                    // ,
                    // {
                    //     'label' : 'SAT' ,
                    //     'value' : (Math.floor(Math.random() * 30) + 10)
                    // } ,
                    // {
                    //     'label' : 'SUN' ,
                    //     'value' : (Math.floor(Math.random() * 30) + 10)
                    // }
                ]
            }
        ];

        this.usersConfig = {
            chart: {
                type: 'discreteBarChart',
                height: 200,
                width: 250,
                // margin : {
                //     top: 20,
                //     right: 20,
                //     bottom: 50,
                //     left: 55
                // },
                color: ['#1491C1'],
                x: function(d){return d.label;},
                y: function(d){return d.value;},
                // showValues: true,
                // valueFormat: function(d){
                //     return d3.format(',.4f')(d);
                // },
                duration: 500,
                // xAxis: {
                //     axisLabel: 'X Axis'
                // },
                yAxis: {
                    // axisLabel: 'Y Axis',
                    axisLabelDistance: -10
                }
            }
        };
        this.usersData = [
            {
                key: 'Cumulative Return',
                values: [
                    {
                        'label' : 'MON' ,
                        'value' : (Math.floor(Math.random() * 20) + 10)
                    } ,
                    {
                        'label' : 'TUE' ,
                        'value' : (Math.floor(Math.random() * 20) + 10)
                    } ,
                    {
                        'label' : 'WED' ,
                        'value' : (Math.floor(Math.random() * 20) + 10)
                    } ,
                    {
                        'label' : 'THU' ,
                        'value' : (Math.floor(Math.random() * 20) + 10)
                    } ,
                    {
                        'label' : 'FRI' ,
                        'value' : (Math.floor(Math.random() * 20) + 10)
                    }
                    // ,
                    // {
                    //     'label' : 'SAT' ,
                    //     'value' : (Math.floor(Math.random() * 20) + 10)
                    // } ,
                    // {
                    //     'label' : 'SUN' ,
                    //     'value' : (Math.floor(Math.random() * 20) + 10)
                    // }
                ]
            }
        ];

        this.usageConfig = {
            chart: {
                type: 'lineChart',
                height: 200,
                width: 550,
                // margin : {
                //     top: 20,
                //     right: 20,
                //     bottom: 40,
                //     left: 55
                // },
                x: function (d) {
                    return d.x;
                },
                y: function (d) {
                    return d.y;
                },
                useInteractiveGuideline: true,
                xAxis: {
                    // axisLabel: 'Time (ms)'
                    // },
                    yAxis: {
                        // axisLabel: 'Voltage (v)',
                        // tickFormat: function(d){
                        //     return d3.format('.02f')(d);
                        // },
                        axisLabelDistance: -10
                    }
                }
            }
        };

        let sin = [];
        for (let i = 0; i < 5; i++) {
            sin.push({x: i, y: (Math.floor(Math.random() * 20) + 10)});
        }

        this.usageData =  [
            {
                values: sin,
                color: '#28B79A',
                key: 'Usage'
            }
        ];

        this.options = {
            chart: {
                type: 'scatterChart',
                height: 450,
                color: ['#3366cc', '#dc3912', '#ff9900', '#109618', '#990099', '#0099c6', '#dd4477', '#66aa00', '#b82e2e'],
                scatter: {
                    onlyCircles: false
                },
                showDistX: true,
                showDistY: true,
                duration: 350,
                xAxis: {
                    axisLabel: 'X Axis',
                    tickFormat: function(d){
                        return d3.format('.02f')(d);
                    }
                },
                yAxis: {
                    axisLabel: 'Y Axis',
                    tickFormat: function(d){
                        return d3.format('.02f')(d);
                    },
                    axisLabelDistance: -5
                },
                pointRange: [1000, 5000]
            }
        };

        // this.data = this.sinAndCos();
        this.data = this.generateDataScatter(1, 7);
    }

    generateDataScatter(groups, points) {
        let data = [],
            shapes = ['circle', 'cross', 'triangle-up', 'triangle-down', 'diamond', 'square'],
            random = d3.random.normal();

        for (let i = 0; i < groups; i++) {
            data.push({
                key: 'Group ' + i,
                values: []
            });

            for (let j = 0; j < points; j++) {
                data[i].values.push({
                    x: random()
                    , y: random()
                    , size: Math.random()
                    , shape: 'circle'
                });
            }
        }
        return data;
    }

    getDataCenterDetails(dataCenters: DataCenter[]) {
        let dataCenterNamesToDataCenter = {};
        for (let dataCenter of dataCenters) {
            dataCenterNamesToDataCenter[dataCenter.name] = dataCenter;
        }

        let dataCenterNames = Object.keys(dataCenterNamesToDataCenter);

        let name = dataCenterNames.pop();
        while (name !== undefined) {
            this.getDataCenterDetailsByName(name, dataCenterNamesToDataCenter);
            name = dataCenterNames.pop();
        }
    }

    private getDataCenterDetailsByName(name:string, dataCenterNamesToDataCenter:{}) {
        this.dataCenterService.getDetails(name).subscribe((dataCenterDetail)=> {
           let hosts = {};
           for (let host of dataCenterDetail.hosts) {
               hosts[host.ambariHost] = host.ambariHost;
           }
           let uniqueHosts = Object.keys(hosts);
           for (let host of uniqueHosts) {
               this.dataSetService.getAll(host, name).subscribe(results => {
                   this.dataSets = [...this.dataSets, ...results];

                   for (let dataSet of results) {
                       if (!this.dataSetsMap[dataSet.category]) {
                           this.dataSetsMap[dataSet.category] = [];
                       }
                       if (!this.dataSetsMap[this.ALL]) {
                           this.dataSetsMap[this.ALL] = [];
                       }
                       this.dataSetsMap[dataSet.category].push(dataSet);
                       this.dataSetsMap[this.ALL].push(dataSet);
                       this.getDataCount(dataSet);
                   }
               });
           }
        });
    }

    getDataCount(dataSet: DataSet) {
        let searchQuery = new SearchQuery();
        searchQuery.clusterHost = dataSet.ambariHost;
        searchQuery.dataCenter = dataSet.dataCenter;

        dataSet['hiveCount'] = 0;
        dataSet['hdfsCount'] = 0;
        dataSet['hbaseCount'] = 0;

        if (dataSet.hiveFilters.length > 0) {
            for (let dataFilter of dataSet.hiveFilters) {
                searchQuery.predicates = [dataFilter];
                this.searchQueryService.getData(searchQuery, 'hive').subscribe((result: any[]) => {
                    dataSet['hiveCount'] += result.length;
                });
            }
        }

        if (dataSet.hBaseFilters.length > 0) {
            for (let dataFilter of dataSet.hBaseFilters) {
                searchQuery.predicates = [dataFilter];
                this.searchQueryService.getData(searchQuery, 'hbase').subscribe((result:any[]) => {
                    dataSet['hbaseCount'] += result.length;
                });
            }
        }

        if (dataSet.fileFilters.length > 0) {
            for (let dataFilter of dataSet.fileFilters) {
                searchQuery.predicates = [dataFilter];
                this.searchQueryService.getData(searchQuery, 'hdfs').subscribe((result:any[]) => {
                    dataSet['hdfsCount'] += result.length;
                });
            }
        }

    }

    setSelectedCategory(category: string) {
        this.selectedCategory = category;
        this.selectedUnclassifiedCategory = '';
    }

    getLastModified(millisec: number): string {
        if (millisec) {
            return new Date(millisec).toDateString();
        }
        return '-';
    }

    getDataSetCategorys(): string[] {
        let keys = Object.keys(this.dataSetsMap).sort().filter(value=> value !== this.ALL);
        if (keys.length > 0) {
            keys.unshift(this.ALL);
        }

        keys.splice(keys.indexOf('Storage Metrics'), 1);
        keys.splice(keys.indexOf('Business Processes'), 1);

        return keys;
    }

    onAddDataSet() {
        this.router.navigate(['ui/data-analyst/dataset/add']);
    }

    viewDataSet(dataSet: DataSet) {

        this.breadcrumbService.crumbMap.shift();
        this.breadcrumbService.crumbMap.unshift({'url': '/ui/data-analyst/analyst-dashboard', 'name': dataSet.dataCenter});

        let navigationExtras = {
            'queryParams' : {'host': dataSet.ambariHost, 'dataCenter': dataSet.dataCenter}
        };
        this.router.navigate(['ui/data-analyst/dataset/view/' + dataSet.name], navigationExtras);
    }

    doNothing() {
        // nothing here ... 
    }
}
