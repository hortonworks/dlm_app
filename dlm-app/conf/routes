# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# health
GET     /health                                               controllers.Status.health
GET     /metrics                                              controllers.Status.metrics

#CredentialStore
GET      /api/store/credentials                                       controllers.CredentialStore.listAllCredentialNames
GET      /api/store/credentialAccounts                                controllers.CredentialStore.listAllCredentialAccounts
POST     /api/store/credential                                        controllers.CredentialStore.addCredentialAccount
PUT      /api/store/credential                                        controllers.CredentialStore.updateCredentialAccount
PUT      /api/store/credential/sync/:cloudAccountId                   controllers.CredentialStore.syncCredentialAccount(cloudAccountId: String)
DELETE   /api/store/credential/:cloudAccountId                        controllers.CredentialStore.deleteCredentialAccount(cloudAccountId: String)
DELETE   /api/store/beaconCredential/:cloudAccountId                  controllers.CredentialStore.deleteBeaconCredential(cloudAccountId: String)

#CloudCred
GET     /api/cluster/:clusterId/credId/:credId                        controllers.CloudCred.retrieveById(clusterId: Long, credId: String)
GET     /api/cluster/:clusterId/credName/:credName                    controllers.CloudCred.retrieveByName(clusterId: Long, credName: String)
GET     /api/cluster/cloudCredentials                                 controllers.CloudCred.listAllCloudCred
GET     /api/cluster/cloudCredWithPolicies                            controllers.CloudCred.listAllCloudCredWithPolicies

#Cloud
GET      /api/cloud/account/:accountId/mountpoints                        controllers.Cloud.listAllMountPoints(accountId: String)
GET      /api/cloud/account/:accountId/mountpoint/:mountPoint/files       controllers.Cloud.listFiles(accountId: String, mountPoint: String)
GET      /api/cloud/account/:cloudAccountId                               controllers.Cloud.checkUserIdentity(cloudAccountId: String)
GET      /api/cloud/accounts/status                                       controllers.Cloud.checkAllCredStatus
POST     /api/cloud/userIdentity                                          controllers.Cloud.getUserIdentity
GET      /api/cloud/account/:accountId/bucket/:bucketName/policy          controllers.Cloud.getBucketPolicy(accountId: String, bucketName: String)

#Clusters
GET     /api/clusters                                                     controllers.Clusters.list
GET     /api/clusters/status                                              controllers.Clusters.listStatus
GET     /api/clusters/beacon/config/status                                controllers.Clusters.listBeaconRequiredConfigs
GET     /api/clusters/beacon/stale/status                                 controllers.Clusters.listBeaconStaleStatus
GET     /api/clusters/:clusterId/status                                   controllers.Clusters.retrieveStatus(clusterId : Long)
GET     /api/clusters/:clusterEndpointId/details/:clusterId               controllers.Clusters.getBeaconClusterDetails(clusterEndpointId : Long, clusterId: Long)
POST    /api/clusters/create/local/:clusterId                             controllers.Clusters.createLocalClusterDefinition(clusterId: Long)
PUT     /api/clusters/sync/:clusterId                                     controllers.Clusters.syncCluster(clusterId: Long)


#Pairs
GET     /api/pairs                                            controllers.Pairs.list
POST    /api/pair                                             controllers.Pairs.create
POST    /api/unpair                                           controllers.Pairs.unpair

#Policies
GET     /api/policies                                         controllers.Policies.list
GET     /api/clusters/:clusterId/policy/:name                 controllers.Policies.retrieve(clusterId : Long, name : String)
POST    /api/clusters/:clusterId/policy/:name/submit          controllers.Policies.submit(clusterId: Long, name: String)
PUT     /api/clusters/:clusterId/policy/:name/suspend         controllers.Policies.suspend(clusterId: Long, name: String)
PUT     /api/clusters/:clusterId/policy/:name/resume          controllers.Policies.resume(clusterId: Long, name: String)
DELETE  /api/clusters/:clusterId/policy/:name                 controllers.Policies.delete(clusterId: Long, name: String)
POST    /api/clusters/:clusterId/policy/test                  controllers.Policies.testPolicy(clusterId: Long)
PUT     /api/clusters/:clusterId/policy/:name                 controllers.Policies.update(clusterId: Long, name: String)

#Policy instances
GET     /api/clusters/:clusterId/policy/:name/jobs            controllers.PolicyInstances.retrieve(clusterId : Long, name : String)
GET     /api/clusters/:clusterId/jobs                         controllers.PolicyInstances.list(clusterId : Long)
PUT     /api/clusters/:clusterId/policy/:name/jobs/abort      controllers.PolicyInstances.abort(clusterId : Long, name : String)
POST     /api/clusters/:clusterId/policy/:name/jobs/rerun     controllers.PolicyInstances.rerun(clusterId : Long, name : String)


#Events
GET     /api/events                                               controllers.Events.list

#Logs
GET     /api/clusters/:clusterId/logs                             controllers.Logs.retrieve(clusterId: Long)

#Admin
GET    /api/beacon/admin/status                                    controllers.Admin.listStatus
GET    /api/beacon/cluster/:clusterId/user                         controllers.Admin.getUserDetials(clusterId : Long)
GET    /api/ambariPrivelege                                        controllers.Admin.getAmbariUserPriveleges

#HdfsFiles
GET     /api/clusters/:clusterId/hdfs/file                     controllers.HdfsFiles.retrieve(clusterId: Long)

#HiveDatabases
GET     /api/clusters/:clusterId/hive/databases                   controllers.HiveDatabases.retrieveDb(clusterId: Long)
GET     /api/clusters/:clusterId/hive/database/:dbName/tables     controllers.HiveDatabases.retrieveDbTables(clusterId: Long, dbName: String)

#YarnQueues
GET     /api/clusters/:clusterId/yarn/queues                      controllers.YarnQueues.retrieve(clusterId: Long)

#DLM App properties
GET     /api/dlmProperties                                        controllers.DlmProperties.getDlmProperties

#Cloud

# Due to the regex involved, Following should be always placed at the end of the file
# static resources
# @TODO: Replace `/usr/dlm-web` with env variable DLM_WEB_HOME
#        which will be set in prod env and will be referred in `StaticAssets.at` method
GET      /                                                        controllers.StaticAssets.atDlmPath(file = "index.html")
GET     /dlm/*file                                                controllers.StaticAssets.atDlmPath(file)
GET     /*file                                                    controllers.StaticAssets.atDlmPath(file)
