#
# /*
#  * Copyright  (c) 2016-2017, Hortonworks Inc.  All rights reserved.
#  *
#  * Except as expressly permitted in a written agreement between you or your company
#  * and Hortonworks, Inc. or an authorized affiliate or partner thereof, any use,
#  * reproduction, modification, redistribution, sharing, lending or other exploitation
#  * of all or any part of the contents of this software is strictly prohibited.
#  */
#
# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#Settings

POST          /api/settings/create-cert                              controllers.Settings.createCert()
GET           /api/settings/certs                                    controllers.Settings.listCerts()
DELETE        /api/settings/delete-cert/:certificateId                         controllers.Settings.deleteCert(certificateId: String)


# health checks
# ===========================================
GET           /health                                                controllers.Status.health
GET           /metrics                                               controllers.Status.metrics

# identity calls
# ===========================================
GET           /api/identity                                          controllers.Authentication.userDetail
GET           /api/identity/:userId                                  controllers.Authentication.userById(userId: String)
POST          /api/identity/actions/change-password                  controllers.Authentication.changePassword

# fetch initial configuration required by ui
# ===========================================
GET           /api/init                                              controllers.Config.init

# Locations
# ===========================================
GET           /api/locations                                         controllers.Locations.list(query: Option[String])
GET           /api/locations/:locationId                             controllers.Locations.retrieve(locationId: String)

# DataplaneClusters
# ===========================================
GET           /api/lakes                                             controllers.DataplaneClusters.list
POST          /api/lakes                                             controllers.DataplaneClusters.create

GET           /api/lakes/:dpClusterId                                controllers.DataplaneClusters.retrieve(dpClusterId: String)
PUT           /api/lakes/:dpClusterId                                controllers.DataplaneClusters.update(dpClusterId: String)
DELETE        /api/lakes/:dpClusterId                                controllers.DataplaneClusters.delete(dpClusterId: String)

GET           /api/lakes/:dpClusterId/services                       controllers.DataplaneClusters.retrieveServices(dpClusterId: String)
GET           /api/lakes/:dpClusterId/servicesDetails                controllers.DataplaneClusters.getDependentServicesDetails(dpClusterId: String)

POST          /api/lakes/:dpClusterId/sync                           controllers.Clusters.syncCluster(dpClusterId: String)

# AmbariClusters
# ===========================================
GET           /api/clusters                                          controllers.Clusters.list(dpClusterId: Option[String])
GET           /api/clusters/:clusterId/health                        controllers.Clusters.getHealth(clusterId: String, summary: Option[Boolean])
GET           /api/clusters/:clusterId/rmhealth                      controllers.Clusters.getResourceManagerHealth(clusterId: String)
GET           /api/clusters/:clusterId/dnhealth                      controllers.Clusters.getDataNodeHealth(clusterId: String)
GET           /api/clusters/:clusterId/hosts                         controllers.Clusters.getHosts(clusterId:Long,ip:Option[String])

GET           /api/actions/clusters                                  controllers.actions.DpClusterActions.listWithClusters

# LDAP
# ===========================================
POST          /api/knox/validate                                     controllers.KnoxConfig.validate
POST          /api/knox/configure                                    controllers.KnoxConfig.configure
GET           /api/knox/configuration                                controllers.KnoxConfig.configuration
GET           /api/knox/ldap                                         controllers.KnoxConfig.getLdapConfiguration
POST          /api/knox/ldap                                         controllers.KnoxConfig.updateLdapConfig
GET           /api/knox/status                                       controllers.KnoxConfig.isKnoxConfigured
GET           /api/users/ldapsearch                                  controllers.UserManager.ldapSearch

# Roles
# ===========================================
GET           /api/roles                                             controllers.UserManager.getAllRoles

# User Management
# ===========================================
POST          /api/users/registerAdmin                               controllers.UserManager.addSuperAdminUser
POST          /api/users/registerAdmins                              controllers.UserManager.addSuperAdminUsers
POST          /api/users/updateActiveAndRoles                        controllers.UserManager.adminUpdateUserRolesAndStatus
POST          /api/users/addUserWithRoles                            controllers.UserManager.addUserWithRoles
POST          /api/users/addUsersWithRoles                           controllers.UserManager.addUsersWithRoles
GET           /api/users/withRoles                                   controllers.UserManager.listUsersWithRoles
GET           /api/users                                             controllers.UserManager.listUsers
GET           /api/users/detail                                      controllers.UserManager.getUserDetail
GET           /api/userGroups                                        controllers.UserManager.getUserGroupsFromLdap
POST          /api/users/withLdapGroups                              controllers.UserManager.createUserFromLdapGroupsConfiguration
POST          /api/users/resyncLdapGroups                            controllers.UserManager.resyncUserFromLdap
GET           /api/identity/:userId                                  controllers.UserManager.getUser(userId: String)

# Group Management
# ===========================================
GET           /api/groups/:name                                      controllers.GroupManager.getGroupsByName(name: String)
GET           /api/groups                                            controllers.GroupManager.getGroups
POST          /api/groups/admin                                      controllers.GroupManager.addAdminGroups
POST          /api/groups/add                                        controllers.GroupManager.addGroupsWithRoles
POST          /api/groups/update                                     controllers.GroupManager.updateGroupInfo

# Services
# ===========================================
GET           /api/services                                          controllers.ServicesManager.getServices
GET           /api/services/byName                                   controllers.ServicesManager.getSkuByName
GET           /api/services/enabled                                  controllers.ServicesManager.getEnabledServices
POST          /api/services/verifyCode                               controllers.ServicesManager.verifySmartSense
POST          /api/services/enable                                   controllers.ServicesManager.enableService
GET           /api/services/:serviceName/dependencies                controllers.ServicesManager.getDependentServices(serviceName: String)
GET           /api/services/:serviceName/health                      controllers.ServicesManager.getServiceHealth(serviceName: String)

# Workspaces
# ===========================================
GET           /api/workspaces                                        controllers.Workspaces.list
GET           /api/workspaces/name/:name                             controllers.Workspaces.retrieve(name: String)
POST          /api/workspaces                                        controllers.Workspaces.create
DELETE        /api/workspaces/name/:name                             controllers.Workspaces.delete(name: String)

# WorkspaceAssets
# ===========================================
POST          /api/workspaces/assets                                 controllers.AssetWorkspaces.add
GET           /api/workspaces/:workspaceId/assets                    controllers.AssetWorkspaces.getAssets(workspaceId: String)

# WorkspaceNotebooks
# ===========================================
POST          /api/workspaces/notebooks                              controllers.NotebookWorkspaces.add
DELETE        /api/workspaces/notebooks/:notebookId                  controllers.NotebookWorkspaces.delete(notebookId: String)
GET           /api/workspaces/:workspaceId/notebooks                 controllers.NotebookWorkspaces.getNotebooks(workspaceId: String)

# Query Clusters
# ===========================================
GET           /api/ambari/status                                     controllers.DataplaneClusters.ambariCheck(url: String)
POST          /api/ambari/details                                    controllers.Clusters.getDetails

# Configuration
# ===========================================
GET           /api/config/:key                                       controllers.Config.getConfig(key: String)

# Miscellaneous
# ===========================================
GET           /api/ga/properties                                     controllers.Config.getGAProperties()
