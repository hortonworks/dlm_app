# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


GET           /health                                          controllers.Status.health


#auth calls
POST          /auth/in                                         controllers.Authentication.signIn
GET           /auth/userDetail                                 controllers.Authentication.userDetail
GET           /auth/signInThrougKnox                           controllers.Authentication.signInThrougKnox
GET           /auth/signOutThrougKnox                          controllers.Authentication.signOutThrougKnox
GET           /api/identity/:userId                            controllers.Authentication.userById(userId: String)

#api

GET           /api/init                                        controllers.Configuration.init
GET           /api/appConfig                                   controllers.Configuration.appConfig

GET           /api/lakes                                       controllers.DataplaneClusters.list
POST          /api/lakes                                       controllers.DataplaneClusters.create
GET           /api/lakes/:lakeId                               controllers.DataplaneClusters.retrieve(lakeId)
DELETE        /api/lakes/:lakeId                               controllers.DataplaneClusters.delete(lakeId)
PUT           /api/lakes/:lakeId                               controllers.DataplaneClusters.update(lakeId)
GET           /api/lakes/ambari/status                         controllers.DataplaneClusters.ambariCheck

GET           /api/locations                                   controllers.Locations.list(query: Option[String])
GET           /api/locations/:locationId                       controllers.Locations.retrieve(locationId: Long)

GET           /api/clusters                                    controllers.Clusters.list(lakeId: Option[Long])
GET           /api/clusters/details                            controllers.Clusters.getDetails
GET           /api/clusters/:clusterId/health                  controllers.Clusters.getHealth(clusterId: Long, summary: Option[Boolean])

GET           /api/actions/lakes-list-with-clusters            controllers.actions.DpClusterActions.listWithClusters


#DTSet-Category
GET           /api/datasets/categories                         controllers.DataSets.listAllCategories
GET           /api/datasets/categories/:search                 controllers.DataSets.searchCategories(search : String, size :Option[Long])
POST          /api/datasets/categories                         controllers.DataSets.createCategory

#DataSet
GET           /api/datasets                                    controllers.DataSets.list
POST          /api/datasets                                    controllers.DataSets.create
GET           /api/datasets/:datasetId                         controllers.DataSets.retrieve(datasetId)
DELETE        /api/datasets/:datasetId                         controllers.DataSets.delete(datasetId)
PUT           /api/datasets                                    controllers.DataSets.update()
#GET         /api/datasets/:name                    controllers.DataSets.getByname(name,host,datacenter)

# Dataset new
POST          /api/atlas-dataset                               controllers.DataSets.createDatasetWithAtlasSearch
GET           /api/dataset/list                                controllers.DataSets.getRichDataset
GET           /api/dataset/list/tag/:tagName                   controllers.DataSets.getRichDatasetByTag(tagName : String)
GET           /api/dataset/:id                                 controllers.DataSets.getRichDatasetById(id : Long)

#Dataasset
GET          /api/dataset/:id/assets                           controllers.DataSets.getDataAssetsByDatasetId(id:Long)

# Atlas API Search
POST          /api/query-assets                                controllers.QueryAssets.search(clusterId: String)
GET           /api/query-attributes                            controllers.QueryAttributes.list(clusterId: String)

#Tags API
GET           /api/dataset-tag/list                            controllers.DataSets.listCategoriesCount
GET           /api/dataset-tag/:tagName                        controllers.DataSets.getCategoryCount(tagName:String)

GET           /api/assets/details/:clusterId/:atlasGuid        controllers.QueryAttributes.getAssetDetails(clusterId: String, atlasGuid: String)
GET           /api/assets/typeDefs/:clusterId/:defType         controllers.QueryAttributes.getTypeDefs(clusterId: String, defType: String)
GET           /api/assets/lineage/:clusterId/:atlasGuid        controllers.QueryAttributes.getLineage(clusterId: String, atlasGuid: String)

#LDAP
POST          /api/knox/validate                               controllers.KnoxConfig.validate
POST          /api/knox/configure                              controllers.KnoxConfig.configure
GET           /api/users/ldapsearch                            controllers.UserManager.ldapSearch

